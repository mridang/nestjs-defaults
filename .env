# NOTE: This file is marked as 'assume unchanged' in Git to prevent accidental 
# commits of changes. It is the recommended way to manage local configuration 
# safely without affecting version control. 
# The file was ignored using using the command 'git update-index --assume-unchanged .env' 
# to ensure that local modifications are not committed. This approach is safe 
# for managing environment-specific settings.
# Even running `git add --force .env` will not stage any changes to this file.
# To stage changes to this file, you must first allow changes to be tracked via
# `git update-index --no-assume-unchanged .env`.

################################################################################
# General Configuration
################################################################################
# These environment variables define various aspects of your application 
# and cloud infrastructure, providing metadata used for logging and monitoring
# purposes. The variables in this section are used by logger. The logger writes
# log messages in a ECS compliant format.

# This JSON log message illustrates how the environment variables are 
# used to format logs according to the Elastic Common Schema (ECS). 

# Sample JSON log message:
# {
#   message: "Yabba dabba doo",
#   level: "info",
#   context: 'Unknown',
#   requestId: 'test-request-id',
#   ['@timestamp']: expect.stringMatching(
#     /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/,
#   ),
#   'log.level': "info",
#   'log.logger': 'Unknown',
#   'os.architecture': 'arm64',
#   'os.hostname': 'Mridangs-MacBook-Pro.local',
#   'os.id': 'Mridangs-MacBook-Pro.local',
#   'os.name': 'Mridangs-MacBook-Pro.local',
#   'os.os.family': 'Darwin',
#   'os.os.full': 'Darwin 23.0.0',
#   'os.os.kernel': '23.0.0',
#   'os.os.name': 'Darwin',
#   'os.os.platform': 'darwin',
#   'os.os.type': 'darwin',
#   'os.os.version':
#     'Darwin Kernel Version 23.0.0: Fri Sep 15 14:41:43 PDT 2023; 
#     root:xnu-10002.1.13~1/RELEASE_ARM64_T6000',
#   'os.type': 'unknown',
#   'service.environment': 'test',
#   'service.name': 'foo',
#   'service.version': '$LATEST',
#   'cloud.account.id': '123456789012',
#   'cloud.account.name': 'my-aws-account',
#   'cloud.availability_zone': 'us-east-1a',
#   'cloud.instance.id': 'i-1234567890abcdef0',
#   'cloud.instance.name': 'my-instance',
#   'cloud.machine.type': 't2.medium',
#   'cloud.provider': 'aws',
#   'cloud.region': 'us-east-1',
#   'cloud.service.name': 'lambda',
# }

# Unique identifier for the AWS Lambda function, used for logs and 
# monitoring.
SERVICE_ID=arn:aws:lambda:us-east-1:123456789012:function:foobar
                                                  # Configured via serverless.ts

# The name of the service or application.
SERVICE_NAME=foobar                               # Configured via serverless.ts

# Type of service, e.g., 'lambda' for AWS Lambda.
SERVICE_TYPE=lambda                               # Configured via serverless.ts

# Version of the service.
SERVICE_VERSION=1                                 # Configured via serverless.ts (plugin)

# AWS account ID, used for identifying the account.
CLOUD_ACCOUNT_ID=123456789012                     # Configured via serverless.ts

# Name of the AWS account.
CLOUD_ACCOUNT_NAME=my-aws-account                 # Not used in production

# Availability zone within the AWS region.
CLOUD_AVAILABILITY_ZONE=us-east-1a                # Configured via serverless.ts

# Instance ID of the specific cloud instance running the service  when running 
# on ECS. If this is deployed on AWS Lambda, this will not be used.
CLOUD_INSTANCE_ID=i-1234567890abcdef0             # Not used in production

# Name of the cloud instance when running on ECS. If this is deployed on AWS
# Lambda, this will not be used.
CLOUD_INSTANCE_NAME=my-instance                   # Not used in production

# Type of cloud instance (e.g., 't2.medium') when running on ECS. If this is 
# deployed on AWS Lambda, this will not be used.
CLOUD_MACHINE_TYPE=t2.medium                      # Not used in production

# Cloud provider being used (e.g., 'aws' for Amazon Web Services).
CLOUD_PROVIDER=aws                                # Configured via serverless.ts

# Cloud region where the service is running (e.g., 'us-east-1').
CLOUD_REGION=us-east-1                            # Configured via serverless.ts

# Name of the cloud service being used (e.g., 'lambda' for AWS Lambda).
CLOUD_SERVICE_NAME=lambda                         # Configured via serverless.ts

################################################################################
# Sentry Configuration
################################################################################
# Sentry is an error tracking tool that helps monitor and fix crashes in real-time. 
# It uses a Data Source Name (DSN) to direct error and performance data to the 
# correct project.

# The Data Source Name (DSN) is a URL that contains authentication information 
# and project details. This URL tells the Sentry SDK where to send events so 
# that they are associated with the right Sentry project.
SENTRY_DSN=https://x@x.ingest.us.sentry.io/x

# If the DSN value is not provided or is left empty, the Sentry SDK will not send 
# any data over the network. This may result in missing error reports or 
# performance metrics. Ensure that the DSN is correctly set in your environment 
# for proper integration with Sentry.

# For more details on what a DSN is and how it works, refer to the Sentry 
# documentation:
# https://docs.sentry.io/concepts/key-terms/dsn-explainer/